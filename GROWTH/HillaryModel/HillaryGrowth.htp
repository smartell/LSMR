#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  int method;
  int nobs;
  data_matrix gdata;
  dvector ltag;
  dvector dl;
  dvector dt;
  int phz;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
  param_init_number  log_linf;
  param_init_number  log_k;
  param_init_number  log_phi;
  param_init_number  log_sig_linf;
  random_effects_vector delta;
  objective_function_value  f;
  param_number  linf;
  param_number  k;
  param_number  phi;
  param_number  sig_linf;
  param_vector dl_hat;
  param_vector epsilon;
  param_stddev_number  sd_dl1;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  virtual void AD_uf_inner(void){pre_userfunction();}
  virtual void AD_uf_outer(void){pre_userfunction();}
  virtual void user_function(void){;}
  virtual void allocate(void){;}
  void zhang_method(void);
  void fabens_method(void);
 dvariable dstudent_t( const dvar_vector& residual, const dvar_vector& df);
 dvariable dnorm(const dvar_vector& residual, const double std);
 dvariable dnorm( const dvar_vector& residual, const dvar_vector std );

};

class df1b2_pre_parameters : public model_parameters
{ 
public: 
df1b2_pre_parameters(int sz,int argc, char * argv[]) : 
model_parameters(sz,argc,argv){;}
  re_objective_function_value  f;
void begin_df1b2_funnel(void); 
void setup_quadprior_calcs(void); 
void end_df1b2_funnel(void);
}; 

class df1b2_parameters : public df1b2_pre_parameters 
{ 
public: 
static df1b2_parameters * df1b2_parameters_ptr;
static df1b2_parameters * get_df1b2_parameters_ptr(void) 
{ 
return df1b2_parameters_ptr; 
} 
df1b2_parameters(int sz,int argc, char * argv[]) : 
df1b2_pre_parameters(sz,argc,argv) 
{ 
df1b2_parameters_ptr=this;
}
  df1b2_init_number  log_linf;
  df1b2_init_number  log_k;
  df1b2_init_number  log_phi;
  df1b2_init_number  log_sig_linf;
  df1b2_init_vector delta;
   // re_objective_function_value  f;
  df1b2variable  linf;
  df1b2variable  k;
  df1b2variable  phi;
  df1b2variable  sig_linf;
  df1b2vector dl_hat;
  df1b2vector epsilon;
  df1b2variable  sd_dl1;
virtual void user_function(void); 
virtual void allocate(void); 
// void begin_df1b2_funnel(void); 
// void setup_quadprior_calcs(void); 
// void end_df1b2_funnel(void);
  void zhang_method(void);
  void fabens_method(void);
 df1b2variable dstudent_t( const df1b2vector& residual, const df1b2vector& df);
 df1b2variable dnorm(const df1b2vector& residual, const double std);
 df1b2variable dnorm( const df1b2vector& residual, const df1b2vector std );

};
