source('~/Documents/UBC_Courses/Fish_504/Tutorials2011/BrownieSim.R')
Brownie Model Simulator.
Random number seed
set.seed(8879)
I <- 3 #Number of years of marking
J <- 4 #Number of years of recaps
m <- 0.5 #true natural mortality
ni <- rpois(I,550)
fj <- rbeta(J,4,12)
P = recapture probability
Z = total mortality
F = fishing mortality
R = recaptures
P=Z=F=R=matrix(nrow=I,ncol=J)
R[i,i:J]=rmultinom(1,ni[i],p)
print(cbind(ni,R))
End of data generation.
PARAMETER_SECTION
theta = list(log.m=log(0.5),log.fj=log(fj))# rep(0.1,length=J))
itheta = as.relistable(theta)
PROCEDURE_SECTION
brownie <- function(theta)
with(relist(theta,skeleton=itheta),{
m=exp(log.m)
fj=exp(log.fj)
compute predicted recaptures given ni
P=Z=F=Rhat=matrix(nrow=I,ncol=J)
cj = fj/(m+fj)*(1-exp(-m-fj))
nll = 0
for(i in 1:I)
tmp_m=(seq(1,length(i:J),1)-1)*m
tmp_f=c(0,cumsum(fj[i:(J-1)]))
Z[i,i:J]=tmp_m + tmp_f
p=exp(-Z[i,i:J])*cj[i:J]
Rhat[i,i:J]=ni[i]*p#rmultinom(1,ni[i],p)
nll=nll   +sum(-dpois(R[i,i:J],Rhat[i,i:J],log=TRUE))
nll=nll+sum(-dmultinom(R[i,i:J],prob=p,log=TRUE))
return(nll)
})
Solver routine to estimate parameters.
solver<-function(theta,objfun,hess=FALSE)
fit<-optim(theta,objfun,method="BFGS",hessian=hess)
if(hess==TRUE)
{
H=fit$hessian     #Matrix of 2nd derivatives
V=solve(H)        #Variance covariance matrix
std=sqrt(diag(V))  #Std of parameters
R=V/(std %o% std) #Correlations.
fit$R=R; fit$std=std
return(fit)
}
fit <- solver(unlist(itheta),brownie,TRUE)
print(exp(fit$par))
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/GrowthSim.R')
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/vonB.R')
fit$par
iF<-read.table(pipe("pbpaste"))
matplot(iF)
F<-read.table(pipe("pbpaste"))
matlines(F)
0.2
sqrt(0.2)
sqrt(1-0.2)
1-sqrt(0.2)
plot(bt)
bt=scan()
mean(bt)
mean(bt[-1])
abline(v=1)
xx <- read.table(pipe("pbpaste"))
matplot(xx[,2:4],xx[,5:7],type="l")
matplot(xx[,5:7],type="l")
ax
px
q()
pwd
dir()
guiView()
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx <- M[[i]][ix]#
		yy <- M[[i]][ix]#
		tmp <- data.frame(what[1]=xx, what[2]=yy)#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx <- M[[i]][ix]#
		yy <- M[[i]][ix]#
		tmp <- data.frame(what[1]=xx, what[2]=yy)#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx <- M[[i]][ix]#
		yy <- M[[i]][ix]#
		tmp <- data.frame(what[1]=xx, what[2]=yy, Model=names(M)[i])#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][ix]#
		tmp <- data.frame(paste(what[1])=xx, paste(what[2])=yy, Model=names(M)[i] )#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][ix]#
		tmp <- data.frame(junk=xx, j2=yy, Model=names(M)[i] )#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}
cat
?cat
what=c("yr","Nt")
str(what[1])
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][ix]#
		tmp <- data.frame(str(what[1])=xx, j2=yy, Model=names(M)[i] )#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	xx <- NULL#
	yy <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][ix]#
		tmp <- data.frame(xx=xx, yy=yy, Model=names(M)[i] )#
		print(tmp)#
	}#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	df <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][iy]#
		tmp <- data.frame(xx=xx, yy=yy, Model=names(M)[i] )#
		df  <- rbind(df, tmp)#
	}#
	print(df)#
	#browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
--------------------------------------------------------------------------- ##
# R-script for plotting output from LSMR.rep#
# Author: Steven Martell#
# DATE: July 9, 2012#
# LOCATION: Wailea Hawaii#
# DEPENDENCIES: read.admb.R#
##
# --------------------------------------------------------------------------- ##
require(PBSmodelling)#
source("./RGui/Gui.R", echo=FALSE)#
source("read.admb.R", echo=FALSE)#
source("plotTrace.R", echo=FALSE)#
source("plotMarginals.R", echo=FALSE)#
#
.SAVEFIGS		<- TRUE#
.PRESENTATION	<- FALSE#
.CEXLAB			<- 1.0#
#
.FILENAME		<- "../SCENARIOS/RUN5/lsmr"#
.FILEDIR		<- "../SCENARIOS/RUN5/"#
.FIGDIR			<- "../FIGS/LSMR/RUN5/"#
getObj <- function(fn=.FILENAME)#
{#
	obj				<- read.admb(.FILENAME)#
	mcfile          <- paste(.FILENAME, ".post", sep="")#
	if(file.exists(mcfile))#
	{#
		obj$mcmc		<- read.table(mcfile, header=TRUE)#
		obj$Nt.ps		<- read.table(paste(.FILEDIR,"Nt.post", sep=""), header=FALSE)#
		obj$Rt.ps		<- read.table(paste(.FILEDIR,"Rt.post", sep=""), header=FALSE)#
		obj$N100.ps		<- read.table(paste(.FILEDIR,"N100.post", sep=""), header=FALSE)#
		obj$N150.ps		<- read.table(paste(.FILEDIR,"N150.post", sep=""), header=FALSE)#
	}#
	class(obj)		<- c(class(obj), "lsmr")#
	return(obj)#
}#
#
obj <- getObj()#
main <- function()#
{#
	graphics.off()#
	obj <- getObj()#
	par(las = 1)#
	par(cex.lab = .CEXLAB)#
	plot(obj);#
	if(.SAVEFIGS) #
	{#
		savefigs()#
	}#
}#
#
savefigs <- function()#
{#
	obj <- getObj()#
	gfn <- paste(.FIGDIR, "fig:LSRM%d.png", sep="")#
	png(gfn, width=960, height=960, res=100)#
	par(cex.lab = .CEXLAB, cex.axis=0.9*.CEXLAB, mar=c(6.1, 5.1, 5.1, 3.1) )#
	plot(obj)#
	dev.off()#
}#
#
# --------------------------------------------------------------------------- ##
# S3 Method for class 'lsmr'                                                  ##
# --------------------------------------------------------------------------- ##
print.lsmr <- function(obj, ...)#
{#
	print(attributes(obj))#
}#
#
plot.lsmr <- function(obj, ...)#
{#
	with(obj, {		#
		.plotNt(obj)#
		gletter(1)#
		.plotRt(obj)#
		gletter(2)#
		.plotFt(obj)#
		gletter(3)#
		.plotMx(obj)#
		gletter(4)#
		.plotSelex(xmid, t(sx))#
		gletter(5)#
		.plotN100(obj)#
		gletter(6)#
		.plotN150(obj)#
		gletter(7)#
		ir = 0#
		for(i in 1:ngear)#
		{#
			ir = 1:irow[i] + max(ir)#
			.plotLF(xmid, i_C[ir, ], Chat[ir, ], "Total Catch")#
			.plotLF(xmid, i_M[ir, ], Mhat[ir, ], "New Marks")#
			.plotLF(xmid, i_R[ir, ], Rhat[ir, ], "Recaptures")#
		}#
		# Posterior samples#
		if(exists("post.samp"))#
		{#
			.mcmcTrace(obj)#
			.plotMarginalPosteriors(obj)#
		}#
	})#
#
}#
#
.plotResiduals <- function(obj, ...)#
{#
	with(obj, {#
		ir = 0#
		for(i in 1:ngear)#
		{#
			ir = 1:irow[i] + max(ir)#
			plotBubbles(t(delta_C[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Catch residuals")#
			plotBubbles(t(delta_M[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Residuals for new marks released")#
			plotBubbles(t(delta_R[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Residuals for recaptured marks")#
		}#
	})#
}#
#
.plotMx <- function(obj, ...)#
{#
	with(obj, { #
		yl <- c(0, 1.2*max(mx))#
		if(exists("true_mx"))yl <- c(0, 1.2*max(mx, true_mx))#
		plot(xmid, mx, type="l", ylim=yl#
		, xlab="Size class (cm)", ylab="Natural mortality")#
		abline(h=m_infty, col=2)#
		points(l_infty, m_infty, pch=19)#
		text(l_infty, m_infty, "M at Linf", pos=3)#
		if(exists("true_mx"))#
		{#
			lines(xmid, true_mx, lwd=2, col=colr(2, 0.5))#
			legend("top", c("estimated","true"),lty=1, lwd=c(1, 2)#
			, col=c(1, colr(2, 0.5)), bty="n")#
		}#
	})#
}#
#
.plotFt <- function(obj, ...)#
{#
	with(obj, {#
		f_yr = seq(min(yr), max(yr), length=dim(fi)[2])#
		matplot(f_yr, t(fi), type="l", ylim=c(0, max(fi))#
		, xlab="Year", ylab="Capture probability", col=1, lty=1:2)#
		if(exists("true_fi"))#
		{#
			matlines(f_yr, t(true_fi), type="l",lwd=2, col=colr(2, 0.5))	#
		}#
		cx = par()$cex.axis#
		legend("top", c("Tramel", "Hoop"), lty=1:2, bty="n", cex=cx)#
	})#
}#
#
.plotRt <- function(obj, scale=1000, ...)#
{#
	with(obj,{#
		yl <- c(0, max(Rt)/scale)#
		if(exists("true_Rt"))yl <- c(0, max(Rt, true_Rt)/scale)#
		plot(yr, Rt/scale, type="h", ylim = yl #
		, xlab="Year", ylab="Annual recruits (1000s)")#
		if(exists("true_Rt"))points(yr, true_Rt/scale, pch=20, col=colr(2, 0.5))#
	})	#
}#
#
.plotNt <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, 1.2*max(Nt))#
		if(exists("true_Nt"))#
			yl <- c(0, 1.2*max(Nt, true_Nt))#
		plot(yr, Nt, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 50 mm)", ...)#
		if(exists("true_Nt"))#
		{#
			lines(yr, true_Nt, lwd=2, col=colr(2, 0.5))#
			legend("top", c("estimated","true"),lty=1, lwd=c(1, 2)#
			, col=c(1, colr(2, 0.5)), bty="n")#
		}#
		# Add credible interval#
		if(exists("Nt.ps"))#
		{#
			ci <- apply(Nt.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
#
.plotN100 <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, max(N100))#
		plot(yr, N100, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 100 mm)", ...)#
		# Add credible interval#
		if(exists("N100.ps"))#
		{#
			ci <- apply(N100.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
.plotN150 <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, max(N150))#
		plot(yr, N150, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 150 mm)", ...)		 #
		# Add credible interval#
		if(exists("N150.ps"))#
		{#
			ci <- apply(N150.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
.plotSelex <- function(x, y, ...)#
{#
	#Plot seletivities#
	matplot(x, y, xlab="Length (cm)", ylab="Selectivity", type="l", col=1)#
}#
#
.polygon  <- function(x, y, ...)#
{#
	# Add a polygon to a plot,  where y is the ci#
	xp <- c(x, rev(x))#
	yp <- c(y[1,], rev(y[2, ]))#
	polygon(xp, yp, col=colr(1, 0.15), border=NA)#
}#
#
.staircase <- function(x, y, ...)#
{#
	# Add a shaded staircase polygon to a plot.#
	dx <- 0.5*(x[2]-x[1])#
	xp <- as.vector(rbind(x-dx, x+dx))#
	yp <- as.vector(rbind(y, y))#
	xp <- c(min(xp), xp, max(xp))#
	yp <- c(0, yp, 0)#
	polygon(xp, yp, col=colr(1, 0.25), ...)#
}#
.plotLF <- function(x, O, P, main="", gap=0, ...)#
{#
	# This funciton plots the observed (O) and predicted (P) #
	# length frequency distributions.#
	opar <- par(no.readonly=TRUE)#
	ir   <- which(rowSums(P)!=0,arr.ind=TRUE)#
	O    <- O[ir, ]#
	P    <- P[ir, ]#
	n    <- dim(O)[1]#
	nr   <- ceiling(sqrt(n))#
	nc   <- ceiling(n/nr)#
	par(mfcol=c(nr, nc), mar=c(1, 1, 1, 1)*gap)#
	par(oma=c(1, 1, 1, 1)*5.5, font.main=1)#
	ymax = max(O[, -1:-2], P)#
	for(i in 1:n)#
	{#
		plot(x, O[i, -1], type="n", xlab="", ylab="", xaxt="n", yaxt="n", ylim=c(0, ymax))#
		.staircase(x, O[i, -1], border=NA)#
		lines(x, P[i, ], col=1)#
		abline(v=c(10, 15), lty=3)#
		title(main=O[i, 1], line=-1)#
		mfg <- par(no.readonly=TRUE)$mfg#
		if(mfg[2]==1 && mfg[1]%%2) axis(2)#
		if(mfg[2]==nc && !mfg[1]%%2) axis(4)#
		if(mfg[1]==nr && mfg[2]%%2) axis(1)#
		if(mfg[1]==1 && !mfg[2]%%2) axis(3)#
	}#
	cx = par()$cex.lab#
	mtext(c("Size class (cm)", "Frequency"), side=c(1, 2), outer=TRUE, line=2.5, las=0, cex=cx)#
	mtext(main, side=3, outer=TRUE, line=2.5)#
	par(opar)#
}
p<-ggplot(mdf)
p<-p+geom_line()
p<-ggplot(mdf,aes(x=yr,y=value)) + geom_line()
p
names(mfd)
names(mdf)
str(what)
yr
??quotes
noquote(what)
?aes
noquote(what)[1]
setwd('/Users/stevenmartell1/Documents/CONSULTING/HumpbackChub/HBC_2011_Assessment/R/RGui')
.VIEWTRCK <- "./RGui/lsmrTracker.txt"#
.WINTEXT  <- "./RGui/lsmrWin.txt"#
guiView <-#
function( winName )#
{#
	# Requires libraries#
	require(PBSmodelling)#
	# Close any open graphics devices or X11 devices#
	graphics.off()#
	closeWin()#
	# Check for global .VIEWTRCK and read header files#
	trckExists <- file.exists( .VIEWTRCK )#
	if (trckExists)#
	{#
		tmp <- read.table( file = .VIEWTRCK,  as.is=TRUE,  header=TRUE,  sep="," )#
		cat( "MSG (.lsmrView): Viewer tracking file ",.VIEWTRCK, " found.\n" )#
		ifiles <- tmp#
		gomenu <- TRUE#
	}#
	else#
	{#
		cat( "Error MSG (.iscamView): missing", .VIEWTRCK, "file.\n")#
		gomenu <- FALSE#
	}#
	if(gomenu)#
	createWin(.WINTEXT)#
}#
#
.plotXY   <- function(M, what, overlay=FALSE, ...)#
{#
	# A generic plotting routine where M is a list of#
	# Model objects to plot#
	# What is a string containing what to plot.#
	n  <- length(M)#
	df <- NULL#
	# Construct a data frame from the model objects#
	for(i in 1:n)#
	{#
		ix <- match( what[1], names(M[[i]]) )#
		iy <- match( what[2], names(M[[i]]) )#
		xx  <- M[[i]][ix]#
		yy  <- M[[i]][iy]#
		tmp <- data.frame(xx=xx, yy=yy, Model=names(M)[i] )#
		names(tmp)[1:2] = what#
		df  <- rbind(df, tmp)#
	}#
	mdf <- melt(df, id.vars=c("Model", what[1]))#
	print(mdf)#
	p <- ggplot(mdf, aes(x=noqote(what)[1], y=noquote(what)[2], col = "Model") )#
	p <- p + geom_line()#
	#print(p)#
	browser()#
	#matplot(xx, yy)#
}#
#
.viewPlot <-#
function()#
{#
	print(".mpdView")#
	# Get the guiPerf parameters so that plot controls available.#
	guiInfo <- getWinVal(scope="L")#
	# List of gui changes#
	guiChanges <- list()#
	# Determine which files have been selected#
	# and read files and store into model object (M)#
	hdr	<- ifiles[ ifiles$Select, ]#
	fn	<- hdr$Control.File#
	M	<- lapply(fn, read.admb)#
	names(M) <- hdr$Model#
	#browser()#
	# use plotType to determine which function to call.#
	switch(plotType, #
		abun50={#
			print("Abundance (> 50)")#
			.plotXY(M, c("yr", "Nt"))#
		}, #
		survey={#
			print("survey")#
			.plotIt(M)#
		}, #
		agecomp={#
			print("agecomp")#
			.plotAgeComps(M)#
		},#
		agehist={#
			print("agehist")#
			.plotAgeHist(M)#
		},  #
		meanwt={#
			print("meanwt")#
			.plotMeanWt(M)#
		}, #
		vbio={#
			print("vbio")#
			.plot_bt(M, "bt")#
		}, #
		sbio={#
			print("sbio")#
			.plot_bt(M, "sbt")#
		}, #
		urate={#
			print("urate")#
			.plot_bt(M, "ut")#
		}, #
		ct_res={#
			print("ct_res")#
			.plot_resid(M, "eta")#
		}, #
		it_res={#
			print("it_res")#
			.plot_resid(M, "epsilon")#
		}#
		)#
	# Return a global model object that are in play#
	iMod <<- M#
}
what
nw=noquote(what)
nw[1]
M[[1]]
X$yr=1:4
X
X$y=132
X$nw[]
X$nw
setwd('/Users/stevenmartell1/Documents/CONSULTING/HumpbackChub/HBC_2011_Assessment/R')
--------------------------------------------------------------------------- ##
# R-script for plotting output from LSMR.rep#
# Author: Steven Martell#
# DATE: July 9, 2012#
# LOCATION: Wailea Hawaii#
# DEPENDENCIES: read.admb.R#
##
# --------------------------------------------------------------------------- ##
require(PBSmodelling)#
require(Hmisc)#
require(ggplot2)#
require(reshape)#
require(grid)#
#
source("./RGui/Gui.R", echo=FALSE)#
source("read.admb.R", echo=FALSE)#
source("plotTrace.R", echo=FALSE)#
source("plotMarginals.R", echo=FALSE)#
#
.SAVEFIGS		<- TRUE#
.PRESENTATION	<- FALSE#
.CEXLAB			<- 1.0#
#
.FILENAME		<- "../SCENARIOS/RUN5/lsmr"#
.FILEDIR		<- "../SCENARIOS/RUN5/"#
.FIGDIR			<- "../FIGS/LSMR/RUN5/"#
getObj <- function(fn=.FILENAME)#
{#
	obj				<- read.admb(.FILENAME)#
	mcfile          <- paste(.FILENAME, ".post", sep="")#
	if(file.exists(mcfile))#
	{#
		obj$mcmc		<- read.table(mcfile, header=TRUE)#
		obj$Nt.ps		<- read.table(paste(.FILEDIR,"Nt.post", sep=""), header=FALSE)#
		obj$Rt.ps		<- read.table(paste(.FILEDIR,"Rt.post", sep=""), header=FALSE)#
		obj$N100.ps		<- read.table(paste(.FILEDIR,"N100.post", sep=""), header=FALSE)#
		obj$N150.ps		<- read.table(paste(.FILEDIR,"N150.post", sep=""), header=FALSE)#
	}#
	class(obj)		<- c(class(obj), "lsmr")#
	return(obj)#
}#
#
obj <- getObj()#
main <- function()#
{#
	graphics.off()#
	obj <- getObj()#
	par(las = 1)#
	par(cex.lab = .CEXLAB)#
	plot(obj);#
	if(.SAVEFIGS) #
	{#
		savefigs()#
	}#
}#
#
savefigs <- function()#
{#
	obj <- getObj()#
	gfn <- paste(.FIGDIR, "fig:LSRM%d.png", sep="")#
	png(gfn, width=960, height=960, res=100)#
	par(cex.lab = .CEXLAB, cex.axis=0.9*.CEXLAB, mar=c(6.1, 5.1, 5.1, 3.1) )#
	plot(obj)#
	dev.off()#
}#
#
# --------------------------------------------------------------------------- ##
# S3 Method for class 'lsmr'                                                  ##
# --------------------------------------------------------------------------- ##
print.lsmr <- function(obj, ...)#
{#
	print(attributes(obj))#
}#
#
plot.lsmr <- function(obj, ...)#
{#
	with(obj, {		#
		.plotNt(obj)#
		gletter(1)#
		.plotRt(obj)#
		gletter(2)#
		.plotFt(obj)#
		gletter(3)#
		.plotMx(obj)#
		gletter(4)#
		.plotSelex(xmid, t(sx))#
		gletter(5)#
		.plotN100(obj)#
		gletter(6)#
		.plotN150(obj)#
		gletter(7)#
		ir = 0#
		for(i in 1:ngear)#
		{#
			ir = 1:irow[i] + max(ir)#
			.plotLF(xmid, i_C[ir, ], Chat[ir, ], "Total Catch")#
			.plotLF(xmid, i_M[ir, ], Mhat[ir, ], "New Marks")#
			.plotLF(xmid, i_R[ir, ], Rhat[ir, ], "Recaptures")#
		}#
		# Posterior samples#
		if(exists("post.samp"))#
		{#
			.mcmcTrace(obj)#
			.plotMarginalPosteriors(obj)#
		}#
	})#
#
}#
#
.plotResiduals <- function(obj, ...)#
{#
	with(obj, {#
		ir = 0#
		for(i in 1:ngear)#
		{#
			ir = 1:irow[i] + max(ir)#
			plotBubbles(t(delta_C[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Catch residuals")#
			plotBubbles(t(delta_M[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Residuals for new marks released")#
			plotBubbles(t(delta_R[ir, ]), xval=yr, yval=xmid, #
				prettyaxis=TRUE, hide0=TRUE, frange=0.02, size=0.1, #
				main="Residuals for recaptured marks")#
		}#
	})#
}#
#
.plotMx <- function(obj, ...)#
{#
	with(obj, { #
		yl <- c(0, 1.2*max(mx))#
		if(exists("true_mx"))yl <- c(0, 1.2*max(mx, true_mx))#
		plot(xmid, mx, type="l", ylim=yl#
		, xlab="Size class (cm)", ylab="Natural mortality")#
		abline(h=m_infty, col=2)#
		points(l_infty, m_infty, pch=19)#
		text(l_infty, m_infty, "M at Linf", pos=3)#
		if(exists("true_mx"))#
		{#
			lines(xmid, true_mx, lwd=2, col=colr(2, 0.5))#
			legend("top", c("estimated","true"),lty=1, lwd=c(1, 2)#
			, col=c(1, colr(2, 0.5)), bty="n")#
		}#
	})#
}#
#
.plotFt <- function(obj, ...)#
{#
	with(obj, {#
		f_yr = seq(min(yr), max(yr), length=dim(fi)[2])#
		matplot(f_yr, t(fi), type="l", ylim=c(0, max(fi))#
		, xlab="Year", ylab="Capture probability", col=1, lty=1:2)#
		if(exists("true_fi"))#
		{#
			matlines(f_yr, t(true_fi), type="l",lwd=2, col=colr(2, 0.5))	#
		}#
		cx = par()$cex.axis#
		legend("top", c("Tramel", "Hoop"), lty=1:2, bty="n", cex=cx)#
	})#
}#
#
.plotRt <- function(obj, scale=1000, ...)#
{#
	with(obj,{#
		yl <- c(0, max(Rt)/scale)#
		if(exists("true_Rt"))yl <- c(0, max(Rt, true_Rt)/scale)#
		plot(yr, Rt/scale, type="h", ylim = yl #
		, xlab="Year", ylab="Annual recruits (1000s)")#
		if(exists("true_Rt"))points(yr, true_Rt/scale, pch=20, col=colr(2, 0.5))#
	})	#
}#
#
.plotNt <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, 1.2*max(Nt))#
		if(exists("true_Nt"))#
			yl <- c(0, 1.2*max(Nt, true_Nt))#
		plot(yr, Nt, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 50 mm)", ...)#
		if(exists("true_Nt"))#
		{#
			lines(yr, true_Nt, lwd=2, col=colr(2, 0.5))#
			legend("top", c("estimated","true"),lty=1, lwd=c(1, 2)#
			, col=c(1, colr(2, 0.5)), bty="n")#
		}#
		# Add credible interval#
		if(exists("Nt.ps"))#
		{#
			ci <- apply(Nt.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
#
.plotN100 <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, max(N100))#
		plot(yr, N100, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 100 mm)", ...)#
		# Add credible interval#
		if(exists("N100.ps"))#
		{#
			ci <- apply(N100.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
.plotN150 <- function(obj,  ...)#
{#
	# plot Numbers greater than 50 mm #
	with(obj, {#
		yl <- c(0, max(N150))#
		plot(yr, N150, type="l", ylim=yl#
		, xlab="Year", ylab="Abundance (> 150 mm)", ...)		 #
		# Add credible interval#
		if(exists("N150.ps"))#
		{#
			ci <- apply(N150.ps, 2, quantile, probs=c(0.025, 0.05, 0.25, 0.5, 0.75, 0.95, 0.975))#
			.polygon(yr, ci[c(1, 7), ])#
			.polygon(yr, ci[c(2, 6), ])#
			.polygon(yr, ci[c(3, 5), ])#
		}#
	})	#
}#
.plotSelex <- function(x, y, ...)#
{#
	#Plot seletivities#
	matplot(x, y, xlab="Length (cm)", ylab="Selectivity", type="l", col=1)#
}#
#
.polygon  <- function(x, y, ...)#
{#
	# Add a polygon to a plot,  where y is the ci#
	xp <- c(x, rev(x))#
	yp <- c(y[1,], rev(y[2, ]))#
	polygon(xp, yp, col=colr(1, 0.15), border=NA)#
}#
#
.staircase <- function(x, y, ...)#
{#
	# Add a shaded staircase polygon to a plot.#
	dx <- 0.5*(x[2]-x[1])#
	xp <- as.vector(rbind(x-dx, x+dx))#
	yp <- as.vector(rbind(y, y))#
	xp <- c(min(xp), xp, max(xp))#
	yp <- c(0, yp, 0)#
	polygon(xp, yp, col=colr(1, 0.25), ...)#
}#
.plotLF <- function(x, O, P, main="", gap=0, ...)#
{#
	# This funciton plots the observed (O) and predicted (P) #
	# length frequency distributions.#
	opar <- par(no.readonly=TRUE)#
	ir   <- which(rowSums(P)!=0,arr.ind=TRUE)#
	O    <- O[ir, ]#
	P    <- P[ir, ]#
	n    <- dim(O)[1]#
	nr   <- ceiling(sqrt(n))#
	nc   <- ceiling(n/nr)#
	par(mfcol=c(nr, nc), mar=c(1, 1, 1, 1)*gap)#
	par(oma=c(1, 1, 1, 1)*5.5, font.main=1)#
	ymax = max(O[, -1:-2], P)#
	for(i in 1:n)#
	{#
		plot(x, O[i, -1], type="n", xlab="", ylab="", xaxt="n", yaxt="n", ylim=c(0, ymax))#
		.staircase(x, O[i, -1], border=NA)#
		lines(x, P[i, ], col=1)#
		abline(v=c(10, 15), lty=3)#
		title(main=O[i, 1], line=-1)#
		mfg <- par(no.readonly=TRUE)$mfg#
		if(mfg[2]==1 && mfg[1]%%2) axis(2)#
		if(mfg[2]==nc && !mfg[1]%%2) axis(4)#
		if(mfg[1]==nr && mfg[2]%%2) axis(1)#
		if(mfg[1]==1 && !mfg[2]%%2) axis(3)#
	}#
	cx = par()$cex.lab#
	mtext(c("Size class (cm)", "Frequency"), side=c(1, 2), outer=TRUE, line=2.5, las=0, cex=cx)#
	mtext(main, side=3, outer=TRUE, line=2.5)#
	par(opar)#
}
?melt
?ggplot
methods(plot)
df
plot(df)
plot(mdf)
class(df)
class(mdf)
plot.data.frame
?plot.data.frame
mdf
qplot(mdf)
qplot(mdf,x=1)
qplot(mdf,x=1,y=2)
qplot(mdf,x=yr,y=Nt)
qplot(data=mdf,x=yr,y=Nt)
qplot(yr,Nt,data=df)
qplot(yr,what[2],data=df)
qplot(yr,noquote(what[2]),data=df)
qplot(yr,Nt,data=df,facets=Model)
qplot(yr,Nt,data=mdf,facets=Model)
head(mdf)
qplot(yr,variable,data=mdf,facets=Model)
qplot(yr,variable,data=mdf)
qplot(yr,variable,data=mdf,geom="line")
qplot(yr,Nt,data=mdf,geom="line")
qplot(yr,value,data=mdf,geom="line")
qplot(yr,value,data=mdf,geom="line",facets=Model)
qplot(yr,value,data=mdf,geom="line",facets=.~Model)
qplot(yr,value,data=mdf,geom="line",col=Model)
what[1]
colnames(mdf[2])
Q
??paste
