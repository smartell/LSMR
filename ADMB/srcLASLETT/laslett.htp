#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  int iyr;
  data_int  nobs;
  int i1;
  int i2;
  data_matrix data;
  ivector ii;
  dvector l1;
  dvector l2;
  dvector dt;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  friend class df1b2_pre_parameters;
  friend class df1b2_parameters;
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
  param_init_bounded_number mu_linf;
  param_init_bounded_number sd_linf;
  param_init_bounded_number k;
  param_init_bounded_number sig;
  param_init_bounded_number muA;
  param_init_bounded_number sigA;
  random_effects_vector A;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value  f;
  param_number  sig2;
  param_stddev_number  sd2_linf;
  param_vector age;
  param_vector l1_hat;
  param_vector l2_hat;
  param_vector linf;
  param_vector f1;
  param_vector f2;
  param_vector rho;
  param_vector nll;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  virtual void AD_uf_inner(void){pre_userfunction();}
  virtual void AD_uf_outer(void){pre_userfunction();}
  virtual void user_function(void){;}
  virtual void allocate(void){;}
  void calc_relative_age(void);
  void calc_predicted_length(void);
  void calc_objective_function(void);

};

class df1b2_pre_parameters : public model_parameters
{ 
public: 
df1b2_pre_parameters(int sz,int argc, char * argv[]) : 
model_parameters(sz,argc,argv){;}
  re_objective_function_value  f;
void begin_df1b2_funnel(void); 
void setup_quadprior_calcs(void); 
void end_df1b2_funnel(void);
}; 

class df1b2_parameters : public df1b2_pre_parameters 
{ 
public: 
static df1b2_parameters * df1b2_parameters_ptr;
static df1b2_parameters * get_df1b2_parameters_ptr(void) 
{ 
return df1b2_parameters_ptr; 
} 
df1b2_parameters(int sz,int argc, char * argv[]) : 
df1b2_pre_parameters(sz,argc,argv) 
{ 
df1b2_parameters_ptr=this;
}
  df1b2_init_bounded_number mu_linf;
  df1b2_init_bounded_number sd_linf;
  df1b2_init_bounded_number k;
  df1b2_init_bounded_number sig;
  df1b2_init_bounded_number muA;
  df1b2_init_bounded_number sigA;
  df1b2_init_vector A;
  df1b2variable prior_function_value;
  df1b2variable likelihood_function_value;
   // re_objective_function_value  f;
  df1b2variable  sig2;
  df1b2variable  sd2_linf;
  df1b2vector age;
  df1b2vector l1_hat;
  df1b2vector l2_hat;
  df1b2vector linf;
  df1b2vector f1;
  df1b2vector f2;
  df1b2vector rho;
  df1b2vector nll;
virtual void user_function(void); 
virtual void allocate(void); 
// void begin_df1b2_funnel(void); 
// void setup_quadprior_calcs(void); 
// void end_df1b2_funnel(void);
  void calc_relative_age(void);
  void calc_predicted_length(void);
  void calc_objective_function(void);

};
