#if !defined(_GI_)
#  define _GI_

class model_data : public ad_comm{
  init_adstring str_dataFile;
  data_int nobs;
  data_ivector inobs;
  data_3array data;
  data_int eof;
  imatrix iyr;
  imatrix loc;
  dmatrix l1;
  dmatrix l2;
  dmatrix dt;
  dmatrix dl;
  int nbins;
  dvector lbins;
  d3_array tmat;
  d3_array T;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number mu_log_linf;
  param_init_number mu_log_k;
  param_init_number mu_log_phi;
  param_init_number sig_log_linf;
  param_init_number sig_log_k;
  param_init_number sig_log_phi;
  param_init_bounded_dev_vector log_linf;
  param_init_bounded_dev_vector log_k;
  param_init_bounded_dev_vector log_phi;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_vector linf;
  param_vector k;
  param_vector phi;
  param_vector fvec;
  param_matrix dl_hat;
  param_matrix epsilon;
  param_matrix sig;
  param_matrix df;
  param_stddev_number sd_mu_linf;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
  void calcLebesgueMeasure(void);
 double ginc(const double& linf, const double& k, const double& tau,const double& l1);
  void vbginc(void);
 dvariable deprecated_dstudent_t( const dvar_vector& residual, const dvar_vector& df);
  void calc_objective_function(void);

};
#endif
