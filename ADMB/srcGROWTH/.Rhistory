source('~/Documents/UBC_Courses/Fish_504/Tutorials2011/BrownieSim.R')
Brownie Model Simulator.
Random number seed
set.seed(8879)
I <- 3 #Number of years of marking
J <- 4 #Number of years of recaps
m <- 0.5 #true natural mortality
ni <- rpois(I,550)
fj <- rbeta(J,4,12)
P = recapture probability
Z = total mortality
F = fishing mortality
R = recaptures
P=Z=F=R=matrix(nrow=I,ncol=J)
R[i,i:J]=rmultinom(1,ni[i],p)
print(cbind(ni,R))
End of data generation.
PARAMETER_SECTION
theta = list(log.m=log(0.5),log.fj=log(fj))# rep(0.1,length=J))
itheta = as.relistable(theta)
PROCEDURE_SECTION
brownie <- function(theta)
with(relist(theta,skeleton=itheta),{
m=exp(log.m)
fj=exp(log.fj)
compute predicted recaptures given ni
P=Z=F=Rhat=matrix(nrow=I,ncol=J)
cj = fj/(m+fj)*(1-exp(-m-fj))
nll = 0
for(i in 1:I)
tmp_m=(seq(1,length(i:J),1)-1)*m
tmp_f=c(0,cumsum(fj[i:(J-1)]))
Z[i,i:J]=tmp_m + tmp_f
p=exp(-Z[i,i:J])*cj[i:J]
Rhat[i,i:J]=ni[i]*p#rmultinom(1,ni[i],p)
nll=nll   +sum(-dpois(R[i,i:J],Rhat[i,i:J],log=TRUE))
nll=nll+sum(-dmultinom(R[i,i:J],prob=p,log=TRUE))
return(nll)
})
Solver routine to estimate parameters.
solver<-function(theta,objfun,hess=FALSE)
fit<-optim(theta,objfun,method="BFGS",hessian=hess)
if(hess==TRUE)
{
H=fit$hessian     #Matrix of 2nd derivatives
V=solve(H)        #Variance covariance matrix
std=sqrt(diag(V))  #Std of parameters
R=V/(std %o% std) #Correlations.
fit$R=R; fit$std=std
return(fit)
}
fit <- solver(unlist(itheta),brownie,TRUE)
print(exp(fit$par))
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/GrowthSim.R')
source('~/Documents/UBC_Courses/Fish_504/ASSIGNMENTS/FISHGROWTH/vonB.R')
fit$par
iF<-read.table(pipe("pbpaste"))
matplot(iF)
F<-read.table(pipe("pbpaste"))
matlines(F)
0.2
sqrt(0.2)
sqrt(1-0.2)
1-sqrt(0.2)
plot(bt)
bt=scan()
mean(bt)
mean(bt[-1])
abline(v=1)
xx <- read.table(pipe("pbpaste"))
matplot(xx[,2:4],xx[,5:7],type="l")
matplot(xx[,5:7],type="l")
ax
px
q()
pwd
dir()
--------------------------------------------------------------------------- ##
# R-script for plotting output from LSMR.rep#
# Author: Steven Martell#
# DATE: July 9, 2012#
# LOCATION: Wailea Hawaii#
# DEPENDENCIES: read.admb.R#
##
# --------------------------------------------------------------------------- ##
source("read.admb.R", echo=FALSE)#
#
.SAVEFIGS		<- FALSE#
.PRESENTATION	<- FALSE#
.FILENAME		<- "../ADMB/srcLSMR/lsmr"#
.FIGDIR			<- "../FIGS/LSMR/"#
getObj <- function(fn=.FILENAME)#
{#
	obj				<- read.admb(.FILENAME)#
	class(obj)		<- c(class(obj), "lsmr")#
	return(obj)#
}#
#
obj <- getObj()#
#
# --------------------------------------------------------------------------- ##
# S3 Method for class 'lsmr'                                                  ##
# --------------------------------------------------------------------------- ##
print.lsmr <- function(obj, ...)#
{#
	print(attributes(obj))#
}#
#
plot.lsmr <- function(obj, ..1000.)#
{#
	opar <- par(no.readonly=TRUE)#
	with(obj, {#
		par(mfcol=c(2, 2), las=1, mar=c(5.1, 4.1, 4.1, 2.1), oma=c(1, 1, 1, 1))#
		jmin  <- min(which(xmid>=15))#
		nx    <- dim(N)[2]#
		Nt100 <- rowSums(N[, jmin:nx])/1000#
		print(Nt100)#
		plot(yr, Nt100, type="l", ylim=c(0, max(Nt100))#
		, xlab="Year", ylab="Abundance (1000s > 100 mm)")#
		#lines(yr, Nt100, col=4, lty=2)#
		if(exists("true_Nt")) lines(yr, true_Nt, col=2, lwd=2)#
		gletter(1)#
		plot(yr, Rt/1000, type="h", ylim=c(0, max(Rt)/1000) #
		, xlab="Year", ylab="Annual recruits (1000s)")#
		if(exists("true_Rt"))points(yr, true_Rt, pch=20, col=2)#
		gletter(2)#
		f_yr = seq(min(yr), max(yr), length=dim(fi)[2])#
		matplot(f_yr, t(fi), type="l", ylim=c(0, max(fi))#
		, xlab="Year", ylab="Capture probability", col=1)#
		if(exists("true_fi"))#
			matlines(f_yr, t(true_fi), type="l", col=2)#
		gletter(3)#
		plot(xmid, mx, type="o", ylim=c(0, max(mx))#
		, xlab="Size class (cm)", ylab="Natural mortality")#
		abline(h=m_infty, col=2)#
		gletter(4)#
		.plotSelex(xmid, t(sx))#
		ir = 0#
		for(i in 1:ngear)#
		{#
			ir = 1:irow[i] + max(ir)#
			.plotLF(xmid, i_C[ir, ], Chat[ir, ], "Total Catch")#
			.plotLF(xmid, i_M[ir, ], Mhat[ir, ], "New Marks")#
			.plotLF(xmid, i_R[ir, ], Rhat[ir, ], "Recaptures")#
		}#
	})#
	par(opar)#
}#
#
.plotSelex <- function(x, y, ...)#
{#
	#Plot seletivities#
	matplot(x, y, xlab="Length (cm)", ylab="Selectivity", type="l", col=1)#
}#
#
.staircase <- function(x, y, ...)#
{#
	# Add a shaded staircase polygon to a plot.#
	dx <- 0.5*(x[2]-x[1])#
	xp <- as.vector(rbind(x-dx, x+dx))#
	yp <- as.vector(rbind(y, y))#
	xp <- c(min(xp), xp, max(xp))#
	yp <- c(0, yp, 0)#
	polygon(xp, yp, col=colr(1, 0.25), ...)#
}#
.plotLF <- function(x, O, P, main="", ...)#
{#
	# This funciton plots the observed (O) and predicted (P) #
	# length frequency distributions.#
	opar <- par(no.readonly=TRUE)#
	ir   <- which(rowSums(P)!=0,arr.ind=TRUE)#
	O    <- O[ir, ]#
	P    <- P[ir, ]#
	n    <- dim(O)[1]#
	nr   <- ceiling(sqrt(n))#
	nc   <- ceiling(n/nr)#
	par(mfcol=c(nr, nc), mar=c(0, 0, 0, 0))#
	par(oma=c(5, 5, 5, 4), font.main=1)#
	ymax = max(O[, -1:-2], P)#
	for(i in 1:n)#
	{#
		plot(x, O[i, -1], type="n", xlab="", ylab="", xaxt="n", yaxt="n", ylim=c(0, ymax))#
		.staircase(x, O[i, -1], border=NA)#
		lines(x, P[i, ], col=1)#
		abline(v=c(10, 15), lty=3)#
		title(main=O[i, 1], line=-1)#
		mfg <- par(no.readonly=TRUE)$mfg#
		if(mfg[2]==1 && mfg[1]%%2) axis(2)#
		if(mfg[2]==nc && !mfg[1]%%2) axis(4)#
		if(mfg[1]==nr && mfg[2]%%2) axis(1)#
		if(mfg[1]==1 && !mfg[2]%%2) axis(3)#
	}#
	mtext(c("Size class (cm)", "Frequency"), side=c(1, 2), outer=TRUE, line=2.5, las=0)#
	mtext(main, side=3, outer=TRUE, line=2.5)#
	par(opar)#
}
setwd('/Users/stevenmartell1/Documents/CONSULTING/HumpbackChub/HBC_2011_Assessment/R')
obj <- getObj()
plot(obj)
source("../../R/Read.admb.R")#
A <- read.admb("GI")#
class(A) <- c("list", "GI")#
#
plot.GI <- function(A, ...)#
{#
	with(A, {#
		par(mfcol=c(6, 4), mar=c(2, 2, 1, 1), oma=c(3, 3, 1, 1))#
		for(i in 1:nobs)#
		{#
			y <- dl[i, ]/dt[i, ]#
			plot(l1[i, ], y, xlab="", ylab="", col=loc[i, ]#
			, xlim=c(min(l1, na.rm=T), max(400, na.rm=T))#
			, ylim=c(min(dl/dt, na.rm=T), max(dl/dt, na.rm=T)))#
			lines(sort(l1[i, ]), rev(sort(dl_hat[i, ]/dt[i, ])), pch=19, col=4)#
			abline(h=0)#
			title(main=iyr[i, 1])#
		}#
		par(mfcol=c(6, 4), mar=c(2, 2, 1, 1), oma=c(3, 3, 1, 1))#
		fn <- function (x)#
		{#
			qqnorm(x, main="", xlab="", ylab="")#
			qqline(x)#
		}#
		apply(epsilon, 1, fn)#
	})#
}#
plot.marg <- function(A, ...)#
{#
	par(mfcol=c(2, 1))#
	with(A, {#
		linf= as.data.frame(exp(post.samp[, 1]+post.samp[, 7:27]))#
		colnames(linf)<-paste(1990:2010)#
		mdf <- melt(linf)#
		q<-qplot(factor(variable),value,data=mdf,geom="violin", xlab="Year", ylab="Asymptotic length (mm)")#
		print(q)#
		dev.copy2pdf(file="../../FIGS/LSMR/fig:LinfPosteriors.pdf", height=5, width=10)#
	})#
	with(A, {#
		k = as.data.frame(exp(post.samp[, 2]+post.samp[, 28:48]))#
		colnames(k)<-paste(1990:2010)#
		mdf <- melt(k)#
		q<-qplot(factor(variable),value,data=mdf,geom="violin", xlab="Year", ylab="Metabolic rate paraemter (k)")#
		print(q)#
		dev.copy2pdf(file="../../FIGS/LSMR/fig:kPosteriors.pdf", height=5, width=10 )	#
	})#
}#
plot.TransitionMatrix <- function(A, ... )#
{#
	L       = read.rep("TransitionMatrix.txt")#
	names(L)=c("lbins",paste("T",1990:2010,sep=""))#
	xx = yy = mean(L$lbins[1:2])+cumsum(diff(L$lbins))#
	zz = t(L$T2005)#
	iyr  <- 1990:2010#
	linf <- A$linf#
	jj  <<-1#
	fn<-function(zz)#
	{#
		zz = t(zz)#
		colnames(zz) = xx#
		rownames(zz) = yy#
		plotBubbles(zz,hide0=TRUE,cpro=TRUE, rpro=FALSE,prettyaxis=FALSE,size=0.05,frange=0.01,dnam=TRUE,#
			 clrs=4, xlab="", ylab="", yaxt="n", xaxt="n")#
		title(main=iyr[jj], line=-1)#
		abline(a=0, b=1, col=colr(1, 0.5), lty=1)#
		points(linf[jj], linf[jj], pch=19, col=colr(2, 0.5))#
		grid()#
		jj <<- jj+1#
		mfg <- par(no.readonly=TRUE)$mfg#
		if(mfg[2]==1 && mfg[1]%%2) axis(2)#
		if(mfg[2]==nc && !mfg[1]%%2) axis(4)#
		if(mfg[1]==nr && mfg[2]%%2) axis(1)#
		if(mfg[1]==1 && !mfg[2]%%2) axis(3)#
	}#
	nc<-4#
	nr<-6#
	par(mfcol=c(nr,nc),mar=c(0,0,0,0),oma=c(4,4,4,4), cex.lab=0.5, mfg=c(1, 1, 6, 4), las=1)#
	lapply(L[-1], fn)#
	mtext("Total length (mm) in year t", 1, outer=TRUE, line=2.5)#
	mtext("Total length (mm) in year t+1", 2, outer=TRUE, line=2.5, las=0)#
	dev.copy2pdf(file="../../FIGS/LSMR/fig:TransitionMatrix.pdf")	#
}
plot(A)
setwd('/Users/stevenmartell1/Documents/CONSULTING/HumpbackChub/HBC_2011_Assessment/ADMB/srcGROWTH')
require(PBSModelling)#
source("../../R/Read.admb.R")#
A <- read.admb("GI")#
class(A) <- c("list", "GI")#
#
plot.GI <- function(A, ...)#
{#
	with(A, {#
		par(mfcol=c(6, 4), mar=c(2, 2, 1, 1), oma=c(3, 3, 1, 1))#
		for(i in 1:nobs)#
		{#
			y <- dl[i, ]/dt[i, ]#
			plot(l1[i, ], y, xlab="", ylab="", col=loc[i, ]#
			, xlim=c(min(l1, na.rm=T), max(400, na.rm=T))#
			, ylim=c(min(dl/dt, na.rm=T), max(dl/dt, na.rm=T)))#
			lines(sort(l1[i, ]), rev(sort(dl_hat[i, ]/dt[i, ])), pch=19, col=4)#
			abline(h=0)#
			title(main=iyr[i, 1])#
		}#
		par(mfcol=c(6, 4), mar=c(2, 2, 1, 1), oma=c(3, 3, 1, 1))#
		fn <- function (x)#
		{#
			qqnorm(x, main="", xlab="", ylab="")#
			qqline(x)#
		}#
		apply(epsilon, 1, fn)#
	})#
}#
plot.marg <- function(A, ...)#
{#
	par(mfcol=c(2, 1))#
	with(A, {#
		linf= as.data.frame(exp(post.samp[, 1]+post.samp[, 7:27]))#
		colnames(linf)<-paste(1990:2010)#
		mdf <- melt(linf)#
		q<-qplot(factor(variable),value,data=mdf,geom="violin", xlab="Year", ylab="Asymptotic length (mm)")#
		print(q)#
		dev.copy2pdf(file="../../FIGS/LSMR/fig:LinfPosteriors.pdf", height=5, width=10)#
	})#
	with(A, {#
		k = as.data.frame(exp(post.samp[, 2]+post.samp[, 28:48]))#
		colnames(k)<-paste(1990:2010)#
		mdf <- melt(k)#
		q<-qplot(factor(variable),value,data=mdf,geom="violin", xlab="Year", ylab="Metabolic rate paraemter (k)")#
		print(q)#
		dev.copy2pdf(file="../../FIGS/LSMR/fig:kPosteriors.pdf", height=5, width=10 )	#
	})#
}#
plot.TransitionMatrix <- function(A, ... )#
{#
	L       = read.rep("TransitionMatrix.txt")#
	names(L)=c("lbins",paste("T",1990:2010,sep=""))#
	xx = yy = mean(L$lbins[1:2])+cumsum(diff(L$lbins))#
	zz = t(L$T2005)#
	iyr  <- 1990:2010#
	linf <- A$linf#
	jj  <<-1#
	fn<-function(zz)#
	{#
		zz = t(zz)#
		colnames(zz) = xx#
		rownames(zz) = yy#
		plotBubbles(zz,hide0=TRUE,cpro=TRUE, rpro=FALSE,prettyaxis=FALSE,size=0.05,frange=0.01,dnam=TRUE,#
			 clrs=4, xlab="", ylab="", yaxt="n", xaxt="n")#
		title(main=iyr[jj], line=-1)#
		abline(a=0, b=1, col=colr(1, 0.5), lty=1)#
		points(linf[jj], linf[jj], pch=19, col=colr(2, 0.5))#
		grid()#
		jj <<- jj+1#
		mfg <- par(no.readonly=TRUE)$mfg#
		if(mfg[2]==1 && mfg[1]%%2) axis(2)#
		if(mfg[2]==nc && !mfg[1]%%2) axis(4)#
		if(mfg[1]==nr && mfg[2]%%2) axis(1)#
		if(mfg[1]==1 && !mfg[2]%%2) axis(3)#
	}#
	nc<-4#
	nr<-6#
	par(mfcol=c(nr,nc),mar=c(0,0,0,0),oma=c(4,4,4,4), cex.lab=0.5, mfg=c(1, 1, 6, 4), las=1)#
	lapply(L[-1], fn)#
	mtext("Total length (mm) in year t", 1, outer=TRUE, line=2.5)#
	mtext("Total length (mm) in year t+1", 2, outer=TRUE, line=2.5, las=0)#
	dev.copy2pdf(file="../../FIGS/LSMR/fig:TransitionMatrix.pdf")	#
}
require(PBSmodelling)
plot.TransitionMatrix(A)
