#if !defined(_LSMR_)
#  define _LSMR_

class model_data : public ad_comm{
  data_int syr;
  data_int nyr;
  data_number dt;
  data_int nrow;
  data_int ncol;
  data_int nbin;
  int nx;
  int nr;
  data_vector xbin;
  dvector xmid;
  data_matrix i_C;
  data_matrix i_M;
  data_matrix i_R;
  dmatrix C;
  dmatrix M;
  dmatrix R;
  data_int eof;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number log_Ninit;
  param_init_number log_rbar;
  param_init_number log_m_linf;
  param_init_number log_lx;
  param_init_number log_gx;
  param_init_bounded_vector init_log_Ninit_devs;
  param_init_bounded_vector log_rec_devs;
  objective_function_value f;
  param_number linf;
  param_number k;
  param_number beta;
  param_number dl_cv;
  param_number fpen;
  param_number m_linf;
  param_number lx;
  param_number gx;
  param_vector mx;
  param_vector sx;
  param_vector log_rt;
  param_vector fi;
  param_matrix N;
  param_matrix T;
  param_matrix Chat;
  param_matrix Mhat;
  param_matrix Rhat;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void initialize_model(void);
  void calc_survival_at_length(void);
  void calc_selectivity_at_length(void);
  void calc_numbers_at_length(void);
  void calc_catch_at_length(void);
 dvar_vector vposfun(const dvar_vector &x,const double eps, dvariable& fpen);
  void calc_objective_function(void);
 dvar_vector dgamma(dvector& x, dvariable& a, dvariable& b);
 dvar_matrix dLTM(dvector& x, const dvariable &linf, const dvariable &k, const dvariable &cv);
 dvar_matrix dv_LTM(dvector& x, const dvariable &linf, const dvariable &k, const dvariable &beta);

};
#endif
